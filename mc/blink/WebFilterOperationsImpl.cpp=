// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "mc/blink/WebFilterOperationsImpl.h"

#include "base/basictypes.h"
#include "skia/ext/refptr.h"
#include "third_party/WebKit/public/platform/WebColor.h"
#include "third_party/WebKit/public/platform/WebPoint.h"
#include "third_party/skia/include/core/SkScalar.h"

namespace mc_blink {

WebFilterOperationsImpl::WebFilterOperationsImpl()
{
}

WebFilterOperationsImpl::WebFilterOperationsImpl(const WebFilterOperations& filters)
{

}

WebFilterOperationsImpl::~WebFilterOperationsImpl()
{
}

const mc::FilterOperations& WebFilterOperationsImpl::asFilterOperations() const
{
    return m_filterOperations;
}

void WebFilterOperationsImpl::appendGrayscaleFilter(float amount) 
{
    //m_filterOperations.Append(cc::FilterOperation::CreateGrayscaleFilter(amount));
}

void WebFilterOperationsImpl::appendSepiaFilter(float amount) 
{
    //m_filterOperations.Append(cc::FilterOperation::CreateSepiaFilter(amount));
}

void WebFilterOperationsImpl::appendSaturateFilter(float amount)
{
    //m_filterOperations.Append(cc::FilterOperation::CreateSaturateFilter(amount));
}

void WebFilterOperationsImpl::appendHueRotateFilter(float amount) 
{
    //m_filterOperations.Append(cc::FilterOperation::CreateHueRotateFilter(amount));
}

void WebFilterOperationsImpl::appendInvertFilter(float amount) 
{
    //m_filterOperations.Append(cc::FilterOperation::CreateInvertFilter(amount));
}

void WebFilterOperationsImpl::appendBrightnessFilter(float amount) 
{
    //m_filterOperations.Append(cc::FilterOperation::CreateBrightnessFilter(amount));
}

void WebFilterOperationsImpl::appendContrastFilter(float amount)
{
    //m_filterOperations.Append(cc::FilterOperation::CreateContrastFilter(amount));
}

void WebFilterOperationsImpl::appendOpacityFilter(float amount)
{
    //m_filterOperations.Append(cc::FilterOperation::CreateOpacityFilter(amount));
}

void WebFilterOperationsImpl::appendBlurFilter(float amount)
{
    //m_filterOperations.Append(cc::FilterOperation::CreateBlurFilter(amount));
}

void WebFilterOperationsImpl::appendDropShadowFilter(blink::WebPoint offset, float std_deviation, blink::WebColor color) 
{
    //m_filterOperations.Append(cc::FilterOperation::CreateDropShadowFilter(offset, std_deviation, color));
}

void WebFilterOperationsImpl::appendColorMatrixFilter(SkScalar matrix[20]) 
{
    //m_filterOperations.Append(cc::FilterOperation::CreateColorMatrixFilter(matrix));
}

void WebFilterOperationsImpl::appendZoomFilter(float amount, int inset) 
{
    //m_filterOperations.Append(cc::FilterOperation::CreateZoomFilter(amount, inset));
}

void WebFilterOperationsImpl::appendSaturatingBrightnessFilter(float amount)
{
    //m_filterOperations.Append(cc::FilterOperation::CreateSaturatingBrightnessFilter(amount));
}

void WebFilterOperationsImpl::appendReferenceFilter(SkImageFilter* image_filter) 
{
    //m_filterOperations.Append(cc::FilterOperation::CreateReferenceFilter(skia::SharePtr(image_filter)));
}

void WebFilterOperationsImpl::clear()
{
    //m_filterOperations.Clear();
}

bool WebFilterOperationsImpl::isEmpty() const 
{
    return m_filterOperations.isEmpty();
}

}  // namespace cc_blink
